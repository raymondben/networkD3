% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forceNetwork4.R
\name{forceNetwork4}
\alias{forceNetwork4}
\title{Create a D3 JavaScript force directed network graph, using v4 of the D3 library.}
\source{
D3.js was created by Michael Bostock. See \url{http://d3js.org/} and, more
specifically for force directed networks. \code{forceNetwork4} uses D3 v4, see:
\url{https://github.com/d3/d3/blob/master/API.md#forces-d3-force}.
}
\usage{
forceNetwork4(Links, Nodes, Source, Target, NodeID, height = NULL,
  width = NULL, node_fill_colour = "#008", node_fill_opacity = 1,
  node_stroke_colour = "#000", node_stroke_width = "1.5 px",
  node_radius = 15, node_label_opacity = 1, node_label_dx = 20,
  node_label_dy = 10, node_label_colour = "#222", node_onclick = NULL,
  node_mouseover = "default", node_mouseout = "default",
  link_stroke_width = 3, link_stroke_colour = "#777", link_distance = 150,
  link_curvature = 500, fontSize = 12, fontFamily = "serif",
  charge = -200, zoom = FALSE, bounded = FALSE, link_onclick = NULL,
  link_mouseover = NULL, link_mouseout = NULL, directed = FALSE,
  collision = FALSE)
}
\arguments{
\item{Links}{a data frame object with the links between the nodes. It should
include the \code{Source} and \code{Target} for each link. These can be 
numbered starting from 0 (as with the \code{forceNetwork} function).
Alternatively, they can be strings (node identifiers, matching those in the Nodes
data.frame) and will be converted to numeric indexes internally.}

\item{Nodes}{a data frame containing the node id and properties of the nodes.}

\item{Source}{character string naming the network source variable in the
\code{Links} data frame.}

\item{Target}{character string naming the network target variable in the
\code{Links} data frame.}

\item{NodeID}{character string specifying the node IDs in the \code{Nodes}
data frame.}

\item{height}{numeric height for the network graph's frame area in pixels.}

\item{width}{numeric width for the network graph's frame area in pixels.}

\item{node_fill_colour}{string or JS_EVAL: either (a) a colour (e.g. "#777") to be applied to all nodes, (b) a column name (where this column in the nodes data.frame holds character colour strings), or (c) a JS_EVAL object representing a javascript expression such as JS("d3.scaleOrdinal(d3.schemeCategory10).domain([0,1,2])(d.group)")}

\item{node_fill_opacity}{string, numeric, or JS_EVAL: either (a) a constant, numeric opacity value (0-1) to be applied to all nodes, (b) a column name (where this column in the nodes data.frame holds an opacity value for each node), or (c) a JS_EVAL object representing a javascript expression such as JS("d.value/100")}

\item{node_stroke_colour}{string or JS_EVAL: as for \code{node_fill_colour}, but controlling the node stroke colour}

\item{node_stroke_width}{string, numeric, or JS_EVAL: as for \code{node_fill_opacity} but controlling node stroke width}

\item{node_radius}{string, numeric, or JS_EVAL: as for \code{node_fill_opacity} but controlling node radius}

\item{node_label_opacity}{string or JS_EVAL: as for \code{node_fill_opacity}, but controlling the opacity of the node labels}

\item{node_label_dx}{numeric or JS_EVAL: x-offset of the label with respect to the node}

\item{node_label_dy}{numeric or JS_EVAL: y-offset of the label with respect to the node}

\item{node_label_colour}{string or JS_EVAL: as for \code{node_fill_colour}, but controlling the node label colour}

\item{node_onclick}{JS expression to evaluate when a node is clicked.}

\item{node_mouseover}{JS expression}

\item{node_mouseout}{JS expression}

\item{link_stroke_width}{string, numeric, or JS_EVAL: as for \code{node_fill_opacity} but controlling link stroke width}

\item{link_stroke_colour}{string or JS_EVAL: as for \code{node_fill_colour}, but controlling the link stroke colour}

\item{link_distance}{string, numeric, or JS_EVAL: as for \code{node_fill_opacity} but controlling the length of each link}

\item{link_curvature}{string or JS_EVAL: as for \code{node_fill_opacity}, but controlling the curvature of each link. Use a large number for straight lines}

\item{fontSize}{numeric font size in pixels for the node text labels.}

\item{fontFamily}{font family for the node text labels.}

\item{charge}{numeric value indicating either the strength of the node
repulsion (negative value) or attraction (positive value).}

\item{zoom}{logical value to enable (\code{TRUE}) or disable (\code{FALSE})
zooming.}

\item{bounded}{logical value to enable (\code{TRUE}) or disable
(\code{FALSE}) the bounding box limiting the graph's extent. See
\url{http://bl.ocks.org/mbostock/1129492}.}

\item{link_onclick}{JS expression}

\item{link_mouseover}{JS expression, e.g. JS("d3.select(this).style(\"stroke\",\"red\");")}

\item{link_mouseout}{JS expression}

\item{directed}{logical value to add arrows to edges}

\item{collision}{logical value to do collision detection and prevent nodes from overlapping}
}
\description{
Create a D3 JavaScript force directed network graph, using v4 of the D3 library.
}
\examples{
## create dummy data
nodes <- data.frame(name=c("Abacetus simplex","Brachidius crassicornis","Catadromus goliath","Darodilia robusta"),N=c(100,120,400,30),some_property=runif(4)*10+10,colour=c("#FF0000","#00FF00","#0000FF","#FFFF00"),stringsAsFactors=FALSE)
links <- data.frame(from=c("Abacetus simplex","Brachidius crassicornis","Abacetus simplex","Darodilia robusta"),to=c("Brachidius crassicornis","Catadromus goliath","Catadromus goliath","Catadromus goliath"),edge_width="3 px",edgevar=c(.3,.3,.1,2),colour=c("#555"),stringsAsFactors=FALSE)

forceNetwork4(Links=links,Nodes=nodes,Source="from",Target="to",NodeID="name",node_radius=JS("Math.sqrt(d.N)*2+10"),node_fill_opacity=0.75,bounded=FALSE,zoom=TRUE,directed=TRUE,node_fill_colour="colour")

}
\seealso{
\code{\link{JS}}.
}

